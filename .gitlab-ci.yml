# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: amazoncorretto:17.0.11

variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  SNYK_TOKEN: "${SNYK_TOKEN}"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - sast
  - docker_build
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - ./mvnw $MAVEN_CLI_OPTS clean package
    - echo "Compile complete."
  artifacts:
    paths:
      - target/*.war
    expire_in: 1 week

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - ./mvnw $MAVEN_CLI_OPTS test -Pdev
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    #- ./mvnw $MAVEN_CLI_OPTS sonar:sonar
    - echo "No lint issues found."

#sast:
#  stage: sast
#  artifacts:
#    reports:
#      sast: gl-sast-report.json

sast-snyk:
  stage: sast
  script:
    - curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
    - chmod +x ./snyk
    - mv ./snyk /usr/local/bin/ 
    - snyk auth $SNYK_TOKEN
    - snyk monitor
    - snyk test --all-projects --severity-threshold=high
  artifacts:
    paths:
      - snyk-report.json
  allow_failure: true

docker_build:
  stage: docker_build
  dependencies:
    - build-job
  before_script:
    # Instalar Docker
    - cat /etc/*-release
    - yum update -y
    - amazon-linux-extras install docker
    # Iniciar Docker
    - nohup /usr/bin/dockerd > /dev/null 2>&1 &
    - sleep 4  # Esperar unos segundos para que Docker Daemon se inicie
    # Verificar instalaciÃ³n de Docker
    - docker ps
  script:
    - ls -l target
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"

release:
  stage: deploy
  image: 
    name: hashicorp/terraform:light
    entrypoint: [""]
  before_script:
    - echo "$SSH_PRIVATE_KEY" > /tmp/ssh_private_key.pem
    - chmod 600 /tmp/ssh_private_key.pem
    - apk add --no-cache curl jq python3 py3-pip
    - pip3 install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    - echo $CI_REGISTRY_USER
    - echo CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - echo "$CI_REGISTRY_IMAGE":latest
  script:
    - terraform init
    - terraform apply -auto-approve -var "region=$AWS_DEFAULT_REGION" -var "access_key=$AWS_ACCESS_KEY_ID" -var "secret_key=$AWS_SECRET_ACCESS_KEY" -var "instance_ip=$INSTANCE_IP" -var "docker_user=$CI_REGISTRY_USER" -var "docker_password=$CI_REGISTRY_PASSWORD" -var "docker_registry=$CI_REGISTRY" -var "docker_image=\"$CI_REGISTRY_IMAGE\":latest" -var "private_key_path=/tmp/ssh_private_key.pem"
  dependencies:
    - docker_build

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  after_script:
    - terraform output deployed_port
